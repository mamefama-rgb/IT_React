import React, { useState, useEffect, useRef } from 'react';
import { MessageCircle, X, Send, User, Bot, FileText, Wifi, Printer, Lock, Monitor, Mail, AlertTriangle} from 'lucide-react';
import './Chatbot.css'; // Import your CSS styles

const Chatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [showTicketForm, setShowTicketForm] = useState(false);
  const [userContext, setUserContext] = useState({
    previousIssues: [],
    preferredLanguage: 'fr',
    expertiseLevel: 'beginner'
  });
  const messagesEndRef = useRef(null);

  // Base de connaissances √©tendue et plus intelligente
  const knowledgeBase = {
    // Probl√®mes de mot de passe
    'authentication': {
      keywords: ['mot de passe', 'password', 'connexion', 'login', 'oubli√©', 'reset', 'authentification', 'compte', 'acc√®s', 'verrouill√©', 'locked'],
      responses: {
        beginner: "üîê **Probl√®me de connexion :**\n\n**Solutions simples :**\n1. V√©rifiez que Caps Lock n'est pas activ√©\n2. Essayez de taper votre mot de passe dans un bloc-notes d'abord\n3. Utilisez 'Mot de passe oubli√©' sur la page de connexion\n4. Attendez 15 minutes si le compte est verrouill√©\n\n**Besoin d'aide imm√©diate ?** Je peux cr√©er un ticket prioritaire pour vous.",
        intermediate: "üîê **Diagnostic de connexion :**\n\n**V√©rifications :**\n‚Ä¢ Caps Lock, Num Lock, langue du clavier\n‚Ä¢ Cache et cookies du navigateur\n‚Ä¢ Synchronisation de l'heure syst√®me\n‚Ä¢ VPN ou proxy actif\n\n**Actions :**\n1. Reset via self-service portal\n2. V√©rification des politiques de s√©curit√©\n3. Test depuis un autre appareil\n\n*Quel message d'erreur voyez-vous exactement ?*",
        expert: "üîê **Analyse d'authentification :**\n\n**Diagnostic avanc√© :**\n‚Ä¢ V√©rifiez les logs d'authentification\n‚Ä¢ Status du domaine et contr√¥leurs\n‚Ä¢ Politiques GPO applicables\n‚Ä¢ Certificats et Kerberos tickets\n\n**Commandes utiles :**\n```cmd\nklist purge\ngpupdate /force\nnslookup _kerberos._tcp.domain.com\n```\n\n*Avez-vous acc√®s aux logs √©v√©nements ?*"
      },
      followUp: ["Avez-vous essay√© depuis un autre appareil ?", "Quel navigateur utilisez-vous ?", "Le probl√®me est-il r√©cent ?"]
    },

    // Probl√®mes r√©seau
    'network': {
      keywords: ['internet', 'connexion', 'r√©seau', 'wifi', 'lent', 'd√©connect√©', 'latence', 'ping', 'dns', 'ip', 'ethernet'],
      responses: {
        beginner: "üåê **Probl√®me de r√©seau :**\n\n**√âtapes simples :**\n1. V√©rifiez l'ic√¥ne WiFi/r√©seau en bas √† droite\n2. Red√©marrez votre box internet (d√©branchez 30 secondes)\n3. Red√©marrez votre ordinateur\n4. Rapprochez-vous de la box WiFi\n\n**Test rapide :** Essayez d'aller sur google.com\n\n*La connexion fonctionne-t-elle sur votre t√©l√©phone ?*",
        intermediate: "üåê **Diagnostic r√©seau :**\n\n**Tests √† effectuer :**\n1. `ping 8.8.8.8` (test internet)\n2. `ping votre-serveur.com` (test interne)\n3. `ipconfig /all` (configuration IP)\n4. `nslookup google.com` (test DNS)\n\n**V√©rifications :**\n‚Ä¢ C√¢bles r√©seau bien connect√©s\n‚Ä¢ LED sur √©quipements r√©seau\n‚Ä¢ Configuration proxy\n‚Ä¢ Pare-feu Windows\n\n*Obtenez-vous une adresse IP automatiquement ?*",
        expert: "üåê **Analyse r√©seau avanc√©e :**\n\n**Diagnostic complet :**\n```cmd\nnetsh winsock reset\nnetsh int ip reset\nipconfig /flushdns\nnetsh interface show interface\ntracert 8.8.8.8\n```\n\n**V√©rifications :**\n‚Ä¢ Table de routage\n‚Ä¢ Configuration VLAN\n‚Ä¢ QoS et bande passante\n‚Ä¢ Logs switch/routeur\n\n*Avez-vous acc√®s aux √©quipements r√©seau ?*"
      },
      followUp: ["Le probl√®me affecte-t-il tous les appareils ?", "Avez-vous des messages d'erreur sp√©cifiques ?", "Depuis quand le probl√®me existe-t-il ?"]
    },

    // Probl√®mes d'impression
    'printing': {
      keywords: ['imprimante', 'imprimer', 'impression', 'bourrage', 'toner', 'encre', 'spooler', 'pilote', 'driver'],
      responses: {
        beginner: "üñ®Ô∏è **Probl√®me d'impression :**\n\n**V√©rifications de base :**\n1. L'imprimante est-elle allum√©e ? (voyant vert)\n2. Y a-t-il du papier dans le bac ?\n3. Y a-t-il des voyants rouges clignotants ?\n4. Les c√¢bles sont-ils bien branch√©s ?\n\n**Solution rapide :** √âteignez/rallumez l'imprimante\n\n*Voyez-vous votre document dans la file d'attente ?*",
        intermediate: "üñ®Ô∏è **Diagnostic d'impression :**\n\n**Actions techniques :**\n1. Panneau de configuration ‚Üí Imprimantes\n2. Clic droit sur l'imprimante ‚Üí 'Voir la file d'attente'\n3. Supprimer tous les documents bloqu√©s\n4. Services ‚Üí 'Spouleur d'impression' ‚Üí Red√©marrer\n\n**Tests :**\n‚Ä¢ Page de test depuis les propri√©t√©s\n‚Ä¢ Impression depuis un autre logiciel\n‚Ä¢ V√©rification des pilotes\n\n*L'imprimante appara√Æt-elle comme 'Pr√™te' ?*",
        expert: "üñ®Ô∏è **R√©solution avanc√©e impression :**\n\n**Diagnostic syst√®me :**\n```cmd\nnet stop spooler\ndel %systemroot%\\system32\\spool\\printers\\*.*\nnet start spooler\n```\n\n**V√©rifications :**\n‚Ä¢ Registre imprimante\n‚Ä¢ Logs √©v√©nements\n‚Ä¢ Conflits de pilotes\n‚Ä¢ Configuration r√©seau (IP fixe)\n‚Ä¢ Permissions de partage\n\n*Gestion centralis√©e via serveur d'impression ?*"
      },
      followUp: ["Quel type d'imprimante utilisez-vous ?", "Le probl√®me concerne-t-il tous les utilisateurs ?", "Avez-vous r√©cemment install√© de nouveaux logiciels ?"]
    },

    // Performance syst√®me
    'performance': {
      keywords: ['lent', 'freeze', 'plantage', 'red√©marrage', 'performance', 'ram', 'disque', 'cpu', 'ralenti', 'bug'],
      responses: {
        beginner: "üíª **Probl√®me de performance :**\n\n**Solutions rapides :**\n1. Red√©marrez votre PC\n2. Fermez les programmes inutiles (Ctrl+Shift+Echap)\n3. V√©rifiez l'espace disque (min. 15% libre)\n4. Lancez Windows Update\n\n**Nettoyage simple :**\n‚Ä¢ Corbeille\n‚Ä¢ Fichiers temporaires\n‚Ä¢ T√©l√©chargements anciens\n\n*Depuis quand le probl√®me existe-t-il ?*",
        intermediate: "üíª **Optimisation syst√®me :**\n\n**Diagnostic :**\n1. Gestionnaire des t√¢ches ‚Üí Onglets Processus/Performance\n2. V√©rifiez utilisation CPU, RAM, Disque\n3. Msconfig ‚Üí D√©marrage (d√©sactiver programmes inutiles)\n4. D√©fragmentation disque dur\n\n**Outils utiles :**\n‚Ä¢ Nettoyage de disque\n‚Ä¢ V√©rificateur de fichiers syst√®me (sfc /scannow)\n‚Ä¢ Moniteur de ressources\n\n*Quels programmes consomment le plus ?*",
        expert: "üíª **Analyse performance avanc√©e :**\n\n**Diagnostic professionnel :**\n```cmd\nperfmon /res\nwmic logicaldisk get size,freespace,caption\nsfc /scannow\nDISM /Online /Cleanup-Image /RestoreHealth\n```\n\n**Analyses :**\n‚Ä¢ Logs d'√©v√©nements syst√®me\n‚Ä¢ Profils utilisateur corrompus\n‚Ä¢ Services Windows non essentiels\n‚Ä¢ M√©triques WMI\n‚Ä¢ Test m√©moire RAM\n\n*Avez-vous un monitoring syst√®me en place ?*"
      },
      followUp: ["Le probl√®me survient-il au d√©marrage ?", "Avez-vous install√© r√©cemment de nouveaux logiciels ?", "L'ordinateur fait-il du bruit inhabituel ?"]
    },

    // Probl√®mes logiciels
    'software': {
      keywords: ['logiciel', 'application', 'programme', 'erreur', 'crash', 'installation', 'mise √† jour', 'licence'],
      responses: {
        beginner: "üîß **Probl√®me de logiciel :**\n\n**Solutions de base :**\n1. Fermez compl√®tement le programme\n2. Relancez-le en tant qu'administrateur\n3. Red√©marrez votre ordinateur\n4. V√©rifiez les mises √† jour disponibles\n\n**Si le probl√®me persiste :**\n‚Ä¢ D√©sinstaller et r√©installer\n‚Ä¢ V√©rifier la compatibilit√© Windows\n\n*Quel logiciel pose probl√®me exactement ?*",
        intermediate: "üîß **R√©solution logicielle :**\n\n**Diagnostic :**\n1. Observateur d'√©v√©nements ‚Üí Journaux Windows\n2. Mode de compatibilit√© (clic droit ‚Üí Propri√©t√©s)\n3. R√©paration/Modification via Programmes et fonctionnalit√©s\n4. V√©rification int√©grit√© fichiers programme\n\n**Tests :**\n‚Ä¢ Nouveau profil utilisateur\n‚Ä¢ Mode sans √©chec\n‚Ä¢ Installation sur autre poste\n\n*Avez-vous un message d'erreur sp√©cifique ?*",
        expert: "üîß **Analyse logicielle avanc√©e :**\n\n**Investigation :**\n```cmd\neventcreate /T ERROR /ID 100 /L APPLICATION /SO MyApp /D \"Test event\"\nget-eventlog -LogName Application -EntryType Error -Newest 50\nreg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\n```\n\n**V√©rifications :**\n‚Ä¢ D√©pendances .NET/Visual C++\n‚Ä¢ Registre Windows\n‚Ä¢ Permissions NTFS\n‚Ä¢ Politiques de s√©curit√©\n‚Ä¢ Conflit DLL\n\n*D√©ploiement via MSI ou installation manuelle ?*"
      },
      followUp: ["Le logiciel fonctionnait-il avant ?", "Avez-vous les droits administrateur ?", "D'autres utilisateurs ont-ils le m√™me probl√®me ?"]
    },

    // S√©curit√©
    'security': {
      keywords: ['virus', 'malware', 's√©curit√©', 'antivirus', 'suspect', 'piratage', 'phishing', 'spam', 'menace'],
      responses: {
        beginner: "üõ°Ô∏è **Probl√®me de s√©curit√© :**\n\n**‚ö†Ô∏è Actions imm√©diates :**\n1. Ne cliquez sur rien de suspect\n2. D√©connectez-vous d'internet si n√©cessaire\n3. Lancez votre antivirus (analyse compl√®te)\n4. Changez vos mots de passe importants\n\n**Signes d'infection :**\n‚Ä¢ PC tr√®s lent\n‚Ä¢ Pop-ups inattendues\n‚Ä¢ Page d'accueil modifi√©e\n\n*D√©crivez exactement ce qui vous inqui√®te*",
        intermediate: "üõ°Ô∏è **Analyse s√©curitaire :**\n\n**Diagnostic :**\n1. Windows Defender ‚Üí Analyse hors ligne\n2. Malwarebytes (outil compl√©mentaire)\n3. V√©rification des programmes install√©s r√©cemment\n4. Analyse des connexions r√©seau actives\n\n**V√©rifications :**\n‚Ä¢ Gestionnaire des t√¢ches (processus suspects)\n‚Ä¢ Extensions navigateur\n‚Ä¢ Fichiers temporaires\n‚Ä¢ Historique t√©l√©chargements\n\n*Avez-vous cliqu√© sur des liens suspects r√©cemment ?*",
        expert: "üõ°Ô∏è **Investigation s√©curit√© avanc√©e :**\n\n**Analyse forensique :**\n```cmd\nnetstat -an | find \"ESTABLISHED\"\ntasklist /svc\nwmic startup list full\nreg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n```\n\n**Outils sp√©cialis√©s :**\n‚Ä¢ ProcessMonitor/ProcessExplorer\n‚Ä¢ Wireshark (trafic r√©seau)\n‚Ä¢ Sysinternals Suite\n‚Ä¢ YARA rules\n‚Ä¢ IOC hunting\n\n*Avez-vous un SOC ou SIEM en place ?*"
      },
      followUp: ["Avez-vous sauvegard√© vos donn√©es r√©cemment ?", "Le probl√®me affecte-t-il d'autres ordinateurs ?", "Avez-vous re√ßu des emails suspects ?"]
    }
  };

  // IA conversationnelle am√©lior√©e
  const conversationalAI = {
    // Salutations et politesse
    greetings: {
      patterns: ['bonjour', 'salut', 'hello', 'bonsoir', 'bonne journ√©e'],
      responses: [
        "üëã Bonjour ! Je suis ravi de vous aider avec vos probl√®mes informatiques.",
        "Salut ! Comment puis-je vous assister aujourd'hui ?",
        "Bonjour ! Quel d√©fi technique puis-je vous aider √† r√©soudre ?"
      ]
    },

    // Remerciements
    gratitude: {
      patterns: ['merci', 'thanks', 'parfait', 'super', 'g√©nial', 'excellent'],
      responses: [
        "De rien ! N'h√©sitez pas si vous avez d'autres questions.",
        "Ravi d'avoir pu vous aider ! üòä",
        "C'est un plaisir ! Je reste disponible si besoin."
      ]
    },

    // Questions sur le chatbot
    aboutBot: {
      patterns: ['qui es-tu', 'comment tu fonctionnes', 'que peux-tu faire', 'aide'],
      response: "ü§ñ **Je suis votre assistant IT intelligent !**\n\n**Je peux vous aider avec :**\n‚Ä¢ Probl√®mes de connexion et mots de passe\n‚Ä¢ Dysfonctionnements r√©seau et WiFi\n‚Ä¢ Probl√®mes d'impression\n‚Ä¢ Performance et lenteur PC\n‚Ä¢ Erreurs logicielles\n‚Ä¢ Questions de s√©curit√©\n‚Ä¢ Cr√©ation de tickets support\n\n**Mes capacit√©s :**\n‚úì Diagnostic √©tape par √©tape\n‚úì Solutions adapt√©es √† votre niveau\n‚úì Support multilingue\n‚úì Escalade vers techniciens\n\n*D√©crivez-moi votre probl√®me, je m'adapte automatiquement √† votre expertise !*"
    }
  };

  // Suggestions contextuelles intelligentes
  const generateSuggestions = (context, userMessage) => {
    const suggestions = [];
    
    if (userMessage.toLowerCase().includes('lent')) {
      suggestions.push("V√©rifier l'utilisation CPU", "Nettoyer les fichiers temporaires", "Red√©marrer en mode sans √©chec");
    }
    
    if (userMessage.toLowerCase().includes('r√©seau') || userMessage.toLowerCase().includes('internet')) {
      suggestions.push("Tester la connexion", "Red√©marrer la box", "V√©rifier les c√¢bles");
    }
    
    if (userMessage.toLowerCase().includes('imprimante')) {
      suggestions.push("V√©rifier les consommables", "Red√©marrer le spooler", "Page de test");
    }
    
    return suggestions.slice(0, 3); // Maximum 3 suggestions
  };

  const quickActions = [
    { label: "üé´ Cr√©er un ticket", action: "create_ticket", icon: FileText },
    { label: "üîê Mot de passe", action: "authentication", icon: Lock },
    { label: "üåê R√©seau", action: "network", icon: Wifi },
    { label: "üñ®Ô∏è Imprimante", action: "printing", icon: Printer },
    { label: "üíª Performance", action: "performance", icon: Monitor },
    { label: "üìß Email", action: "email", icon: Mail }
  ];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (isOpen && messages.length === 0) {
      setMessages([{
        id: 1,
        text: "üëã **Bonjour ! Je suis votre assistant IT intelligent.**\n\nJe peux vous aider avec tous vos probl√®mes informatiques. Mon IA s'adapte automatiquement √† votre niveau d'expertise !\n\n**Pour commencer :** D√©crivez-moi votre probl√®me ou choisissez une action rapide ci-dessous.",
        sender: 'bot',
        timestamp: new Date(),
        suggestions: ["Mon PC est lent", "Probl√®me de connexion", "L'imprimante ne fonctionne pas"]
      }]);
    }
  }, [isOpen, messages.length]);

  // IA de matching am√©lior√©e avec analyse contextuelle
  const findBestResponse = (userMessage) => {
    const message = userMessage.toLowerCase();
    let bestMatch = null;
    let maxScore = 0;
    let matchedCategory = null;

    // V√©rifier les r√©ponses conversationnelles d'abord
    for (const [category, data] of Object.entries(conversationalAI)) {
      if (data.patterns) {
        const score = data.patterns.reduce((acc, pattern) => {
          return message.includes(pattern.toLowerCase()) ? acc + 2 : acc;
        }, 0);
        
        if (score > 0) {
          if (data.responses) {
            return {
              response: data.responses[Math.floor(Math.random() * data.responses.length)],
              category: category,
              suggestions: []
            };
          } else {
            return {
              response: data.response,
              category: category,
              suggestions: []
            };
          }
        }
      }
    }

    // Recherche dans la base de connaissances technique
    for (const [category, data] of Object.entries(knowledgeBase)) {
      let score = 0;
      
      // Score bas√© sur les mots-cl√©s
      score += data.keywords.reduce((acc, keyword) => {
        const keywordScore = message.includes(keyword.toLowerCase()) ? 1 : 0;
        // Bonus si le mot-cl√© appara√Æt plusieurs fois
        const occurrences = (message.match(new RegExp(keyword.toLowerCase(), 'g')) || []).length;
        return acc + keywordScore + (occurrences > 1 ? occurrences * 0.5 : 0);
      }, 0);

      // Bonus pour les mots-cl√©s en d√©but de phrase
      data.keywords.forEach(keyword => {
        if (message.startsWith(keyword.toLowerCase())) {
          score += 1;
        }
      });
      
      if (score > maxScore) {
        maxScore = score;
        bestMatch = data;
        matchedCategory = category;
      }
    }

    if (bestMatch && maxScore > 0) {
      const userLevel = userContext.expertiseLevel;
      const response = bestMatch.responses[userLevel] || bestMatch.responses.beginner;
      const suggestions = generateSuggestions(matchedCategory, userMessage);
      
      return {
        response: response,
        category: matchedCategory,
        suggestions: suggestions,
        followUp: bestMatch.followUp || []
      };
    }

    return null;
  };

  // IA g√©n√©rative pour les questions non reconnues
  const generateIntelligentResponse = (userMessage) => {
    const message = userMessage.toLowerCase();
    
    // Analyse des intentions
    const intentions = {
      question: ['comment', 'pourquoi', 'que', 'quoi', 'o√π', 'quand', '?'],
      problem: ['ne fonctionne pas', 'erreur', 'probl√®me', 'bug', 'panne', 'cass√©'],
      request: ['peux-tu', 'pouvez-vous', 'aide-moi', 'aidez-moi', 'comment faire'],
      urgent: ['urgent', 'critique', 'imm√©diatement', 'rapidement', 'bloqu√©']
    };

    let detectedIntention = 'general';
    let maxIntentionScore = 0;

    for (const [intention, patterns] of Object.entries(intentions)) {
      const score = patterns.reduce((acc, pattern) => {
        return message.includes(pattern) ? acc + 1 : acc;
      }, 0);
      
      if (score > maxIntentionScore) {
        maxIntentionScore = score;
        detectedIntention = intention;
      }
    }

    // R√©ponses adapt√©es selon l'intention
    const responses = {
      question: "ü§î **C'est une excellente question !**\n\nJe vais faire de mon mieux pour vous aider. Cependant, votre question est tr√®s sp√©cifique et pourrait n√©cessiter l'expertise d'un technicien.\n\n**Que puis-je faire :**\n‚Ä¢ Cr√©er un ticket d√©taill√© avec votre question\n‚Ä¢ Vous orienter vers la bonne ressource\n‚Ä¢ Vous donner des conseils g√©n√©raux\n\n*Souhaitez-vous que je cr√©e un ticket pour avoir une r√©ponse d'expert ?*",
      
      problem: "‚ö†Ô∏è **Je comprends que vous rencontrez un probl√®me.**\n\nPour vous aider efficacement, j'ai besoin de plus d'informations :\n\n**Dites-moi :**\n‚Ä¢ Quel √©quipement/logiciel est concern√© ?\n‚Ä¢ Quand le probl√®me a-t-il commenc√© ?\n‚Ä¢ Avez-vous un message d'erreur ?\n‚Ä¢ Le probl√®me affecte-t-il d'autres personnes ?\n\n*Plus vous serez pr√©cis, mieux je pourrai vous aider !*",
      
      request: "ü§ù **Je suis l√† pour vous aider !**\n\nVoici comment proc√©der :\n\n**1.** D√©crivez-moi votre besoin en d√©tail\n**2.** Je vous propose des solutions √©tape par √©tape\n**3.** Si n√©cessaire, je cr√©e un ticket pour un suivi personnalis√©\n\n**Mes sp√©cialit√©s :**\n‚Ä¢ D√©pannage technique\n‚Ä¢ Configuration syst√®me\n‚Ä¢ R√©solution d'erreurs\n‚Ä¢ Optimisation performance\n\n*Que souhaitez-vous que je vous aide √† faire ?*",
      
      urgent: "üö® **Situation urgente d√©tect√©e !**\n\n**Actions imm√©diates :**\n1. D√©crivez bri√®vement le probl√®me critique\n2. Je vous donne une solution rapide si possible\n3. Je cr√©e un ticket prioritaire automatiquement\n4. Escalade vers l'√©quipe technique si n√©cessaire\n\n**Pour les urgences critiques :**\nüìû Hotline : 01-XX-XX-XX-XX (24h/7j)\nüìß Urgent : support-urgent@entreprise.com\n\n*D√©crivez-moi l'urgence en quelques mots*",
      
      general: "ü§ñ **Je n'ai pas bien saisi votre demande.**\n\nPour mieux vous aider, pourriez-vous :\n\n**Reformuler** en utilisant des mots-cl√©s comme :\n‚Ä¢ \"Mon ordinateur...\"\n‚Ä¢ \"L'imprimante...\"\n‚Ä¢ \"Je n'arrive pas √†...\"\n‚Ä¢ \"Comment faire pour...\"\n\n**Ou choisir** une action rapide ci-dessous.\n\n*Je suis con√ßu pour comprendre les probl√®mes techniques. N'h√©sitez pas √† √™tre pr√©cis !*"
    };

    return {
      response: responses[detectedIntention],
      category: 'ai_generated',
      suggestions: ['Cr√©er un ticket', 'Voir les solutions courantes', 'Parler √† un technicien'],
      followUp: []
    };
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage = {
      id: Date.now(),
      text: inputMessage,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    const currentMessage = inputMessage;
    setInputMessage('');
    setIsTyping(true);

    // Simulation du temps de r√©ponse avec d√©lai r√©aliste
    setTimeout(() => {
      let result = findBestResponse(currentMessage);
      
      if (!result) {
        result = generateIntelligentResponse(currentMessage);
      }

      // Mise √† jour du contexte utilisateur
      setUserContext(prev => ({
        ...prev,
        previousIssues: [...prev.previousIssues.slice(-4), result.category] // Garde les 5 derniers probl√®mes
      }));

      const botMessage = {
        id: Date.now() + 1,
        text: result.response,
        sender: 'bot',
        timestamp: new Date(),
        suggestions: result.suggestions || [],
        followUp: result.followUp || []
      };

      setMessages(prev => [...prev, botMessage]);
      setIsTyping(false);
    }, Math.random() * 1000 + 500); // D√©lai r√©aliste entre 0.5 et 1.5 secondes
  };

  const handleQuickAction = (action) => {
    if (action === 'create_ticket') {
      setShowTicketForm(true);
      return;
    }

    const response = knowledgeBase[action];
    if (response) {
      const userLevel = userContext.expertiseLevel;
      const responseText = response.responses[userLevel] || response.responses.beginner;
      
      const botMessage = {
        id: Date.now(),
        text: responseText,
        sender: 'bot',
        timestamp: new Date(),
        suggestions: generateSuggestions(action, action),
        followUp: response.followUp || []
      };
      setMessages(prev => [...prev, botMessage]);
    }
  };

  const handleSuggestionClick = (suggestion) => {
    setInputMessage(suggestion);
    // Auto-envoi de la suggestion
    setTimeout(() => {
      handleSendMessage();
    }, 100);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const formatTime = (date) => {
    return date.toLocaleTimeString('fr-FR', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const TicketForm = () => {
    const [formData, setFormData] = useState({
      title: '',
      description: '',
      category: '',
      priority: 'medium',
      contactMethod: 'email',
      phone: '',
      email: ''
    });

    const categories = ['Mat√©riel', 'Logiciel', 'R√©seau', 'S√©curit√©', 'Acc√®s/Comptes', 'Performance', 'Autre'];
    const priorities = [
      { value: 'low', label: 'Basse', color: 'text-green-600', description: 'Pas urgent, peut attendre' },
      { value: 'medium', label: 'Moyenne', color: 'text-yellow-600', description: 'R√©solution sous 24h' },
      { value: 'high', label: 'Haute', color: 'text-orange-600', description: 'R√©solution sous 4h' },
      { value: 'critical', label: 'Critique', color: 'text-red-600', description: 'Intervention imm√©diate' }
    ];

    const handleSubmit = (e) => {
      e.preventDefault();
      
      const ticketId = `TKT-${Date.now().toString().slice(-6)}`;
      
      const botMessage = {
        id: Date.now(),
        text: `‚úÖ **Ticket cr√©√© avec succ√®s !**\n\n**üé´ Num√©ro :** ${ticketId}\n**üìù Titre :** ${formData.title}\n**üìÇ Cat√©gorie :** ${formData.category}\n**‚ö° Priorit√© :** ${formData.priority.toUpperCase()}\n\n**üìã Prochaines √©tapes :**\n1. Vous recevrez un email de confirmation\n2. Un technicien sera assign√© selon la priorit√©\n3. Vous serez contact√© via ${formData.contactMethod}\n\n**‚è±Ô∏è Temps de r√©solution estim√© :**\n${formData.priority === 'critical' ? '< 1 heure' : formData.priority === 'high' ? '< 4 heures' : formData.priority === 'medium' ? '< 24 heures' : '< 48 heures'}\n\n*Conservez ce num√©ro pour le suivi : ${ticketId}*`,
        sender: 'bot',
        timestamp: new Date(),
        suggestions: ['Cr√©er un autre ticket', 'Suivre mes tickets', 'Retour au support']
      };

      setMessages(prev => [...prev, botMessage]);
      setShowTicketForm(false);
      setFormData({ title: '', description: '', category: '', priority: 'medium', contactMethod: 'email', phone: '', email: '' });
    };

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 ticket-form-overlay">
        <div className="bg-white rounded-lg p-6 w-full max-w-lg mx-4 max-h-[90vh] overflow-y-auto ticket-form-modal">
          <div className="flex justify-between items-center mb-6">
            <h3 className="text-xl font-bold flex items-center gap-2 text-gray-800">
              <FileText className="w-6 h-6 text-blue-600" />
              Cr√©er un ticket de support
            </h3>
            <button
              onClick={() => setShowTicketForm(false)}
              className="text-gray-500 hover:text-gray-700 p-1"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2 text-gray-700">
                <AlertTriangle className="w-4 h-4 inline mr-1" />
                Titre du probl√®me *
              </label>
              <input
                type="text"
                required
                value={formData.title}
                onChange={(e) => setFormData({...formData, title: e.target.value})}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Ex: Impossible de me connecter √† mon email"
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-2 text-gray-700">
                <FileText className="w-4 h-4 inline mr-1" />
                Description d√©taill√©e *
              </label>
              <textarea
                required
                value={formData.description}
                onChange={(e) => setFormData({...formData, description: e.target.value})}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent h-24"
                placeholder="D√©crivez le probl√®me, les messages d'erreur, ce que vous avez d√©j√† essay√©..."
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-2 text-gray-700">Cat√©gorie *</label>
                <select
                  required
                  value={formData.category}
                  onChange={(e) => setFormData({...formData, category: e.target.value})}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="">Choisir...</option>
                  {categories.map(cat => (
                    <option key={cat} value={cat}>{cat}</option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium mb-2 text-gray-700">Priorit√©</label>
                <select
                  value={formData.priority}
                  onChange={(e) => setFormData({...formData, priority: e.target.value})}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  {priorities.map(priority => (
                    <option key={priority.value} value={priority.value} className={priority.color}>
                      {priority.label}
                    </option>
                  ))}
                </select>
                <p className="text-xs text-gray-500 mt-1">
                  {priorities.find(p => p.value === formData.priority)?.description}
                </p>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium mb-2 text-gray-700">Contact pr√©f√©r√©</label>
              <div className="space-y-2">
                <label className="flex items-center">
                  <input
                    type="radio"
                    value="email"
                    checked={formData.contactMethod === 'email'}
                    onChange={(e) => setFormData({...formData, contactMethod: e.target.value})}
                    className="mr-2"
                  />
                  üìß Email
                </label>
                <label className="flex items-center">
                  <input
                    type="radio"
                    value="phone"
                    checked={formData.contactMethod === 'phone'}
                    onChange={(e) => setFormData({...formData, contactMethod: e.target.value})}
                    className="mr-2"
                  />
                  üìû T√©l√©phone
                </label>
              </div>
            </div>

            <div className="flex gap-3 pt-4">
              <button
                type="button"
                onClick={() => setShowTicketForm(false)}
                className="flex-1 px-4 py-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Annuler
              </button>
              <button
                type="submit"
                className="flex-1 px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
              >
                Cr√©er le ticket
              </button>
            </div>
          </form>
        </div>
      </div>
    );
  };

  return (
    <>
      {/* Bouton flottant pour ouvrir le chat */}
      {!isOpen && (
        <button
          onClick={() => setIsOpen(true)}
          className="chat-float-button"
        >
          <MessageCircle className="icon" />
          <div className="online-indicator"></div>
        </button>
      )}

      {/* Interface du chatbot */}
      {isOpen && (
        <div className="chat-container">
          {/* Header */}
          <div className="chat-header">
            <div className="chat-header-left">
              <div className="bot-avatar">
                <Bot className="icon" />
                <div className="online-indicator"></div>
              </div>
              <div>
                <h3 className="chat-title">Assistant IT Intelligent</h3>
                <p className="chat-status">En ligne ‚Ä¢ R√©pond en temps r√©el</p>
              </div>
            </div>
            <button
              onClick={() => setIsOpen(false)}
              className="close-btn"
            >
              <X className="icon" />
            </button>
          </div>

          {/* Messages */}
          <div className="messages-container">
            {messages.map((message) => (
              <div key={message.id} className="message-block">
                <div className={`message-row ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                  <div className={`message-bubble ${message.sender}`}>
                    <div className="message-meta">
                      {message.sender === 'bot' && <Bot className="icon-sm" />}
                      {message.sender === 'user' && <User className="icon-sm" />}
                      <div className="message-time">
                        {formatTime(message.timestamp)}
                      </div>
                    </div>
                    <div className="message-text">
                      {message.text}
                    </div>
                  </div>
                </div>
                {message.suggestions && message.suggestions.length > 0 && (
                  <div className="suggestions-row">
                    {message.suggestions.map((suggestion, idx) => (
                      <button
                        key={idx}
                        onClick={() => handleSuggestionClick(suggestion)}
                        className="suggestion-chip"
                      >
                        {suggestion}
                      </button>
                    ))}
                  </div>
                )}
              </div>
            ))}
            {isTyping && (
              <div className="message-row justify-start">
                <div className="message-bubble bot">
                  <div className="typing">
                    <Bot className="icon-sm" />
                    <div className="typing-dots">
                      <span></span><span></span><span></span>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Actions rapides */}
          <div className="quick-actions">
            {quickActions.slice(0, 4).map((action, idx) => {
              const IconComponent = action.icon;
              return (
                <button
                  key={idx}
                  onClick={() => handleQuickAction(action.action)}
                  className="quick-action-btn"
                >
                  <IconComponent className="icon-sm" />
                  <span>{action.label.replace(/üé´|üîê|üåê|üñ®Ô∏è/, '').trim()}</span>
                </button>
              );
            })}
          </div>

          {/* Input */}
          <div className="chat-input-bar">
            <div className="input-wrapper">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="D√©crivez votre probl√®me..."
                className="chat-input"
                disabled={isTyping}
              />
            </div>
            <button
              onClick={handleSendMessage}
              disabled={isTyping || !inputMessage.trim()}
              className="send-btn"
            >
              <Send className="icon-sm" />
            </button>
          </div>
          <div className="chat-hint">
            <div className="online-indicator hint"></div>
            <span>Assistant IA ‚Ä¢ Appuyez sur Entr√©e pour envoyer</span>
          </div>
        </div>
      )}

      {/* Formulaire de cr√©ation de ticket */}
      {showTicketForm && <TicketForm />}
    </>
  );
};

export default Chatbot;